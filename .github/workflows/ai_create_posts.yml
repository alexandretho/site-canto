name: AI ‚Äì Create Blog Post (OpenRouter, Canto)

on:
  schedule:
    # A cada 4 horas
    - cron: "0 */4 * * *"
  workflow_dispatch: {}

permissions:
  contents: write

concurrency:
  group: ai-post-bot
  cancel-in-progress: false

jobs:
  ai_post:
    runs-on: ubuntu-latest

    env:
      # üéØ Pool de temas (pode editar/expandir)
      TOPIC_POOL: >
        Curiosidades sobre a voz,
        Import√¢ncia de ter uma mentoria vocal,
        Dicas de aquecimento vocal r√°pido,
        Cuidados com a voz antes de cantar,
        Passaggio: como suavizar a transi√ß√£o,
        Twang: quando e como usar,
        Belting com seguran√ßa,
        Respira√ß√£o costo-diafragm√°tica,
        Higiene vocal di√°ria,
        Voz mista (mix voice) na pr√°tica,
        Recupera√ß√£o vocal p√≥s-resfriado,
        Postura e proje√ß√£o,
        Articula√ß√£o e dic√ß√£o para palco,
        Como estudar canto com consist√™ncia,
        Erros comuns que desgastam a voz,
        Prepara√ß√£o para ensaio e show,
        Aquecimento e desaquecimento em 3 minutos,
        Como escolher repert√≥rio para seu tipo de voz,
        Como a fono pode ajudar cantores,
        Mentoria: como acelera sua evolu√ß√£o

      # ‚úçÔ∏è Tom/estilo do texto
      TONE: "Did√°tico, encorajador, com exemplos pr√°ticos e avisos de sa√∫de vocal"

      # üî§ Tamanho do post (em palavras)
      MIN_WORDS: "280"
      MAX_WORDS: "520"

      # üè∑Ô∏è Metadados do site (opcional, ajuda na identifica√ß√£o do tr√°fego do OpenRouter)
      SITE_NAME: "Seu Site de Mentoria Vocal"
      SITE_URL: "https://SEU_USUARIO.github.io/SEU_REPO"

      # üìÇ Onde salvar os arquivos
      POSTS_DIR: "posts"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          pip install --disable-pip-version-check --no-cache-dir \
            "openai==1.35.13" "httpx==0.27.2" "python-slugify==8.0.4"

      - name: Generate post with AI (auto-pick free model)
        env:
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        run: |
          python - <<'PY'
          import os, json, random, datetime, pathlib, re, sys
          import httpx
          from slugify import slugify
          from openai import OpenAI
          from openai import APIStatusError

          topics     = [t.strip() for t in os.getenv("TOPIC_POOL","").split(",") if t.strip()]
          tone       = os.getenv("TONE", "Did√°tico e encorajador")
          min_words  = int(os.getenv("MIN_WORDS","280"))
          max_words  = int(os.getenv("MAX_WORDS","520"))
          site_name  = os.getenv("SITE_NAME","Site")
          site_url   = os.getenv("SITE_URL","https://example.com")
          posts_dir  = pathlib.Path(os.getenv("POSTS_DIR","posts"))
          api_key    = os.getenv("OPENROUTER_API_KEY")
          if not api_key:
            raise SystemExit("‚ùå OPENROUTER_API_KEY ausente nos Secrets.")

          topic = random.choice(topics) if topics else "Curiosidades sobre a voz"

          # Data local (America/Sao_Paulo)
          try:
            from zoneinfo import ZoneInfo
            now_sp = datetime.datetime.now(ZoneInfo("America/Sao_Paulo"))
          except Exception:
            now_sp = datetime.datetime.utcnow() - datetime.timedelta(hours=3)

          date_pt = now_sp.strftime("%d/%m/%Y")
          iso_stamp = now_sp.strftime("%Y-%m-%d-%H%M")

          system_prompt = f"""
          Voc√™ √© um redator especialista em canto e fonoaudiologia.
          Escreva em PT-BR, tom {tone}, para cantores iniciantes e intermedi√°rios.
          Regras:
          - Markdown puro (sem HTML).
          - Estrutura:
            # T√≠tulo (comece com um emoji tem√°tico, ex.: üé§, üó£Ô∏è, üé∂)
            Introdu√ß√£o (1‚Äì2 par√°grafos) com uma curiosidade/gancho.
            ## Conceitos essenciais
            ## Exerc√≠cios pr√°ticos (em bullets ou passos)
            ## Erros comuns e como evitar
            ## Quando procurar um fono/mentor
            ### Pontos-chave (3‚Äì5 bullets)
          - Inclua a linha: **Data:** {date_pt}
          - Use linguagem clara e segura (sem prometer resultado cl√≠nico).
          - Tamanho entre {min_words} e {max_words} palavras.
          """.strip()

          user_prompt = f"""
          Gere um post sobre: {topic}.
          Retorne JSON com:
          "title": string (sem markdown),
          "body": string (markdown completo).
          """.strip()

          # Descobrir modelos dispon√≠veis no OpenRouter
          headers = {"Authorization": f"Bearer {api_key}", "Accept": "application/json"}
          try:
            r = httpx.get("https://openrouter.ai/api/v1/models", headers=headers, timeout=30)
            r.raise_for_status()
            data = r.json().get("data", [])
          except Exception as e:
            raise SystemExit(f"‚ùå Falha ao listar modelos no OpenRouter: {e}")

          # Coletar modelos "gr√°tis": id cont√©m ':free' ou pricing 0
          free_models = []
          for m in data:
            mid = m.get("id","")
            pricing = m.get("pricing", {}) or {}
            prompt_cost = pricing.get("prompt")
            completion_cost = pricing.get("completion")
            zero_pricing = (prompt_cost in (0, "0", "0.0", "0.00", None) and completion_cost in (0, "0", "0.0", "0.00", None))
            if ":free" in mid or zero_pricing:
              free_models.append(mid)

          candidates = free_models or ["openrouter/auto"]

          client = OpenAI(base_url="https://openrouter.ai/api/v1", api_key=api_key)
          extra_headers = {
            "HTTP-Referer": site_url,                  # ASCII
            "X-Title": f"{site_name} - AI Post Bot",   # ASCII
          }

          def call_model(model, max_toks):
            return client.chat.completions.create(
              model=model,
              messages=[
                {"role":"system","content":system_prompt},
                {"role":"user","content":user_prompt},
              ],
              temperature=0.7,
              max_tokens=max_toks,
              extra_headers=extra_headers,
            )

          last_err = None
          content = None
          used_model = None
          for mtoks in [900, 800, 700, 600, 512]:
            for m in candidates:
              try:
                resp = call_model(m, mtoks)
                content = resp.choices[0].message.content.strip()
                used_model = m
                if content:
                  break
              except APIStatusError as e:
                last_err = e
                continue
              except Exception as e:
                last_err = e
                continue
            if content:
              break
          if not content:
            raise SystemExit(f"‚ùå Sem conte√∫do: {last_err}")

          # Parse JSON robusto
          def parse_json(s: str):
            try:
              return json.loads(s)
            except json.JSONDecodeError:
              mm = re.search(r"\{[\s\S]*\}", s)
              if not mm: raise
              return json.loads(mm.group(0))

          obj = parse_json(content)
          title = obj.get("title", f"{topic}").strip()
          body  = obj.get("body", f"# {title}\n\n**Data:** {date_pt}\n\n(Conte√∫do)").strip()

          # Garante cabe√ßalho H1
          if not body.lstrip().startswith("# "):
            body = f"# {title}\n\n{body}"

          # Salva arquivo .md
          posts_dir.mkdir(parents=True, exist_ok=True)
          filename = f"{iso_stamp}-{slugify(title)}.md"
          path = posts_dir / filename
          path.write_text(body, encoding="utf-8")
          print(f"‚úÖ Post salvo em {path} (modelo: {used_model})")

          # Atualiza posts/index.json (m√°x 100 itens)
          index_path = posts_dir / "index.json"
          items = []
          if index_path.exists():
            try:
              items = json.loads(index_path.read_text(encoding="utf-8"))
            except Exception:
              items = []

          excerpt = " ".join([ln for ln in body.splitlines()[1:]])[:400]
          items.append({
            "title": title,
            "url": f"./{posts_dir.name}/{filename}",
            "date": now_sp.isoformat(),
            "tags": ["canto","voz","mentoria","cuidados"],
            "excerpt": excerpt
          })
          # ordena desc e limita 100
          items = sorted(items, key=lambda x: x["date"], reverse=True)[:100]
          index_path.write_text(json.dumps(items, ensure_ascii=False, indent=2), encoding="utf-8")
          print(f"üóÇÔ∏è index.json atualizado ({len(items)} itens).")

          PY

      - name: Commit & Push
        run: |
          git config user.name "actions-bot"
          git config user.email "actions@users.noreply.github.com"
          git add posts/
          git commit -m "chore: add AI post (canto) [skip ci]" || echo "nada a commitar"
          git push
